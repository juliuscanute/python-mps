package com.juliuscanute.python.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_DottedName;
  private ConceptPresentation props_FromStatement;
  private ConceptPresentation props_ImportStatement;
  private ConceptPresentation props_ImportStatementAsName;
  private ConceptPresentation props_Name;
  private ConceptPresentation props_PythonProgram;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DottedName:
        if (props_DottedName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DottedName");
          props_DottedName = cpb.create();
        }
        return props_DottedName;
      case LanguageConceptSwitch.FromStatement:
        if (props_FromStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("import and bound locally");
          cpb.rawPresentation("import_from");
          props_FromStatement = cpb.create();
        }
        return props_FromStatement;
      case LanguageConceptSwitch.ImportStatement:
        if (props_ImportStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("import and bound locally");
          cpb.rawPresentation("import_name");
          props_ImportStatement = cpb.create();
        }
        return props_ImportStatement;
      case LanguageConceptSwitch.ImportStatementAsName:
        if (props_ImportStatementAsName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("imported and bound as name");
          cpb.rawPresentation("import_as_name");
          props_ImportStatementAsName = cpb.create();
        }
        return props_ImportStatementAsName;
      case LanguageConceptSwitch.Name:
        if (props_Name == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Name");
          props_Name = cpb.create();
        }
        return props_Name;
      case LanguageConceptSwitch.PythonProgram:
        if (props_PythonProgram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PythonProgram");
          props_PythonProgram = cpb.create();
        }
        return props_PythonProgram;
    }
    return null;
  }
}
