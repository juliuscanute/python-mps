package com.juliuscanute.python.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class PythonElseIfStatement_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if ((SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.test$dy2P) != null)) {
      tgs.append("elif ");
      tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.test$dy2P));
      tgs.append(" :");
      tgs.newLine();
    } else {
      tgs.append("else :");
      tgs.newLine();
    }
    ctx.getBuffer().area().increaseIndent();
    for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.consequent$dywR))) {
      tgs.indent();
      tgs.appendNode(statement);
    }
    ctx.getBuffer().area().decreaseIndent();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink test$dy2P = MetaAdapterFactory.getContainmentLink(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a88263dd7L, 0x4e7b579a88264f3fL, "test");
    /*package*/ static final SContainmentLink consequent$dywR = MetaAdapterFactory.getContainmentLink(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a88263dd7L, 0x4e7b579a88264f41L, "consequent");
  }
}
