package com.juliuscanute.python.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import com.juliuscanute.python.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.DottedName:
        return new DottedName_TextGen();
      case LanguageConceptSwitch.FromStatement:
        return new FromStatement_TextGen();
      case LanguageConceptSwitch.FromStatementAsName:
        return new FromStatementAsName_TextGen();
      case LanguageConceptSwitch.ImportStatement:
        return new ImportStatement_TextGen();
      case LanguageConceptSwitch.ImportStatementAsName:
        return new ImportStatementAsName_TextGen();
      case LanguageConceptSwitch.PythonArrayExpression:
        return new PythonArrayExpression_TextGen();
      case LanguageConceptSwitch.PythonAssignmentExpression:
        return new PythonAssignmentExpression_TextGen();
      case LanguageConceptSwitch.PythonBinaryExpression:
        return new PythonBinaryExpression_TextGen();
      case LanguageConceptSwitch.PythonBooleanLiteral:
        return new PythonBooleanLiteral_TextGen();
      case LanguageConceptSwitch.PythonCallExpression:
        return new PythonCallExpression_TextGen();
      case LanguageConceptSwitch.PythonClassStatement:
        return new PythonClassStatement_TextGen();
      case LanguageConceptSwitch.PythonElseIfStatement:
        return new PythonElseIfStatement_TextGen();
      case LanguageConceptSwitch.PythonExpression:
        return new PythonExpression_TextGen();
      case LanguageConceptSwitch.PythonExpressionStatement:
        return new PythonExpressionStatement_TextGen();
      case LanguageConceptSwitch.PythonForStatement:
        return new PythonForStatement_TextGen();
      case LanguageConceptSwitch.PythonFunctionDefinitionStatement:
        return new PythonFunctionDefinitionStatement_TextGen();
      case LanguageConceptSwitch.PythonIdentifier:
        return new PythonIdentifier_TextGen();
      case LanguageConceptSwitch.PythonIdentifierReference:
        return new PythonIdentifierReference_TextGen();
      case LanguageConceptSwitch.PythonIfElseStatement:
        return new PythonIfElseStatement_TextGen();
      case LanguageConceptSwitch.PythonIndentBlockStatement:
        return new PythonIndentBlockStatement_TextGen();
      case LanguageConceptSwitch.PythonLogicalExpression:
        return new PythonLogicalExpression_TextGen();
      case LanguageConceptSwitch.PythonMemberExpression:
        return new PythonMemberExpression_TextGen();
      case LanguageConceptSwitch.PythonNode:
        return new PythonNode_TextGen();
      case LanguageConceptSwitch.PythonNoneLiteral:
        return new PythonNoneLiteral_TextGen();
      case LanguageConceptSwitch.PythonNumericLiteral:
        return new PythonNumericLiteral_TextGen();
      case LanguageConceptSwitch.PythonObjectExpression:
        return new PythonObjectExpression_TextGen();
      case LanguageConceptSwitch.PythonProgram:
        return new PythonProgram_TextGen();
      case LanguageConceptSwitch.PythonProperty:
        return new PythonProperty_TextGen();
      case LanguageConceptSwitch.PythonReturnStatement:
        return new PythonReturnStatement_TextGen();
      case LanguageConceptSwitch.PythonSelfExpression:
        return new PythonSelfExpression_TextGen();
      case LanguageConceptSwitch.PythonStatement:
        return new PythonStatement_TextGen();
      case LanguageConceptSwitch.PythonStringLiteral:
        return new PythonStringLiteral_TextGen();
      case LanguageConceptSwitch.PythonTryElseStatement:
        return new PythonTryElseStatement_TextGen();
      case LanguageConceptSwitch.PythonTryExceptExpressionStatement:
        return new PythonTryExceptExpressionStatement_TextGen();
      case LanguageConceptSwitch.PythonTryExceptStatement:
        return new PythonTryExceptStatement_TextGen();
      case LanguageConceptSwitch.PythonTryFinallyStatement:
        return new PythonTryFinallyStatement_TextGen();
      case LanguageConceptSwitch.PythonTryStatement:
        return new PythonTryStatement_TextGen();
      case LanguageConceptSwitch.PythonTupleExpression:
        return new PythonTupleExpression_TextGen();
      case LanguageConceptSwitch.PythonUnaryExpression:
        return new PythonUnaryExpression_TextGen();
      case LanguageConceptSwitch.PythonVariableDeclarator:
        return new PythonVariableDeclarator_TextGen();
      case LanguageConceptSwitch.PythonWhileStatement:
        return new PythonWhileStatement_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.PythonProgram$s$)) {
        String fname = getFileName_PythonProgram(root);
        String ext = getFileExtension_PythonProgram(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_PythonProgram(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileExtension_PythonProgram(SNode node) {
    return null;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PythonProgram$s$ = MetaAdapterFactory.getConcept(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x35a661b8fcb327e9L, "com.juliuscanute.python.structure.PythonProgram");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
