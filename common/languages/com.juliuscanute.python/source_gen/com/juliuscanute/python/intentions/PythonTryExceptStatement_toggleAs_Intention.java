package com.juliuscanute.python.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class PythonTryExceptStatement_toggleAs_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public PythonTryExceptStatement_toggleAs_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:e5a6e1c7-8d10-4da3-8439-305db38f2394(com.juliuscanute.python.intentions)", "5655210078330181903"));
  }
  @Override
  public String getPresentation() {
    return "PythonTryExceptStatement_toggleAs";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "toggle as identifier";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode expStmt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a89141c69L, "com.juliuscanute.python.structure.PythonTryExceptExpressionStatement"));
      if ((SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.expression$u0bk), LINKS.renamedIdentifier$nuAh) == null)) {
        SLinkOperations.setTarget(expStmt, LINKS.actualIdentifier$nzZC, SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.expression$u0bk), LINKS.actualIdentifier$nzZC));
        SLinkOperations.setTarget(expStmt, LINKS.renamedIdentifier$nuAh, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x49693ebcac74a5a6L, "com.juliuscanute.python.structure.PythonIdentifier")));
        SLinkOperations.setTarget(node, LINKS.expression$u0bk, expStmt);
      } else {
        SLinkOperations.setTarget(expStmt, LINKS.actualIdentifier$nzZC, SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.expression$u0bk), LINKS.actualIdentifier$nzZC));
        SLinkOperations.setTarget(expStmt, LINKS.renamedIdentifier$nuAh, null);
        SLinkOperations.setTarget(node, LINKS.expression$u0bk, expStmt);
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return PythonTryExceptStatement_toggleAs_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expression$u0bk = MetaAdapterFactory.getContainmentLink(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a88e103dcL, 0x4e7b579a88fa5830L, "expression");
    /*package*/ static final SContainmentLink renamedIdentifier$nuAh = MetaAdapterFactory.getContainmentLink(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a89141c69L, 0x4e7b579a89141c92L, "renamedIdentifier");
    /*package*/ static final SContainmentLink actualIdentifier$nzZC = MetaAdapterFactory.getContainmentLink(0x3b1a18ff6fd44977L, 0xba7ea7ddc907c639L, 0x4e7b579a89141c69L, 0x4e7b579a89141c94L, "actualIdentifier");
  }
}
